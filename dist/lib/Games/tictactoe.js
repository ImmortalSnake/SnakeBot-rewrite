"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class TicTacToe {
    constructor(client, AI) {
        this.board = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];
        this.client = client;
        this.AI = AI;
        this.player1 = 'O';
        this.comp = AI ? 'X' : null;
        this.player2 = AI ? null : 'X';
        this.pval = this.comp ? [this.comp, this.player1] : null;
        this.first = this.player1;
        this.difficulty = 0;
        this.players = [];
    }
    play(msg, players) {
        return __awaiter(this, void 0, void 0, function* () {
            this.players = players;
            if (this.AI) {
                let difficulty = yield msg.prompt('Select Difficulty:\n1] Easy\n2] Medium\n3] Impossible')
                    .then(r => r.content)
                    .catch(e => { return e; });
                difficulty = parseInt(`${difficulty}`);
                if (!difficulty || difficulty > 4 || difficulty < 1)
                    return msg.send('Invalid Difficulty Level');
                this.difficulty = difficulty;
            }
            let res = yield this.move(msg).catch(e => { return e; });
            return res;
        });
    }
    move(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.first !== this.comp)
                yield msg.channel.send(this.getBoard(this.board));
            if (this.verifyWin(this.board, 'X'))
                return 'X has won';
            else if (this.verifyWin(this.board, 'O'))
                return 'O has won';
            else if (this.board.filter(s => parseInt(s)).length === 0)
                return 'Tie';
            let m;
            if (this.AI && this.comp === this.first)
                m = this.AIMove();
            else
                m = yield this.playerMove(msg, this.first).catch(e => { throw e; });
            this.board[m] = this.first;
            if (this.first === 'O')
                this.first = 'X';
            else
                this.first = 'O';
            if (this.players)
                this.players.reverse();
            return this.move(msg);
        });
    }
    playerMove(msg, player) {
        return __awaiter(this, void 0, void 0, function* () {
            let m = yield this.prompt(msg, 'Enter A Number From 1 to 9', this.players[0])
                .then(x => parseInt(x.content))
                .catch(e => { throw e; });
            if (!m || m > 9 || m < 0 || !this.validMove(m)) {
                msg.send('Invalid Move');
                return this.playerMove(msg, player);
            }
            return m - 1;
        });
    }
    AIMove() {
        let m = 4;
        const depth = this.board.filter(s => parseInt(s)).length;
        if (this.difficulty === 3)
            m = this.minimax(this.board, depth, 0)[0];
        if (this.difficulty === 2)
            m = this.random(this.board);
        if (this.difficulty === 1)
            m = this.minimax(this.board, depth, 1)[0];
        return m;
    }
    random(state) {
        const rand = Math.floor(Math.random() * 9);
        if (!this.validMove(rand))
            return this.random(state);
        return rand;
    }
    minimax(state, depth, pnum) {
        const p = this.pval[pnum];
        let best = [-1, Infinity];
        if (p === this.comp)
            best = [-1, -Infinity];
        if (depth === 0 || this.verifyWin(state, this.comp) || this.verifyWin(state, this.player1))
            return [-1, this.evaluate(state)];
        for (let i = 0; i < 9; i++) {
            if (state[i] === 'X' || state[i] === 'O')
                continue;
            state[i] = p;
            let score = this.minimax(state, depth - 1, Math.abs(pnum - 1));
            state[i] = `${i + 1}`;
            score[0] = i;
            if (p === this.comp) {
                if (score[1] > best[1])
                    best = score;
            }
            else if (score[1] < best[1])
                best = score;
        }
        return best;
    }
    evaluate(state) {
        if (this.verifyWin(state, this.comp))
            return 1;
        else if (this.verifyWin(state, this.player1))
            return -1;
        return 0;
    }
    validMove(m) {
        return this.board[m] !== 'X' || this.board[m] !== 'O';
    }
    prompt(msg, prompt, user) {
        return __awaiter(this, void 0, void 0, function* () {
            const mess = yield msg.channel.send(prompt);
            const collected = yield mess.channel.awaitMessages(m => m.author.id === user, { time: 30000, max: 1 });
            yield mess.delete();
            if (collected.size === 0)
                throw 'Timeout! Try again';
            return collected.first();
        });
    }
    getBoard(board) {
        return `
\`\`\`js
| ${board[0]} | ${board[1]} | ${board[2]} |
| ${board[3]} | ${board[4]} | ${board[5]} |
| ${board[6]} | ${board[7]} | ${board[8]} |
\`\`\`
        `;
    }
    verifyWin(board, player) {
        return (board[0] === board[1] && board[0] === board[2] && board[0] === player)
            || (board[0] === board[3] && board[0] === board[6] && board[0] === player)
            || (board[3] === board[4] && board[3] === board[5] && board[3] === player)
            || (board[1] === board[4] && board[1] === board[7] && board[1] === player)
            || (board[6] === board[7] && board[6] === board[8] && board[6] === player)
            || (board[2] === board[5] && board[2] === board[8] && board[2] === player)
            || (board[0] === board[4] && board[0] === board[8] && board[0] === player)
            || (board[2] === board[4] && board[2] === board[6] && board[2] === player);
    }
}
exports.default = TicTacToe;
//# sourceMappingURL=data:application/json;base64,